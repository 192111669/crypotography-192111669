#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

char *encrypt(const char *plaintext, const char *key) {
    char *ciphertext = (char *)malloc(strlen(plaintext) + 1);
    if (ciphertext == NULL) {
        printf("Memory allocation failed.");
        exit(1);
    }

    for (int i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            char base = isupper(plaintext[i]) ? 'A' : 'a';
            ciphertext[i] = key[plaintext[i] - base];
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[strlen(plaintext)] = '\0';
    return ciphertext;
}

char *decrypt(const char *ciphertext, const char *key) {
    char *plaintext = (char *)malloc(strlen(ciphertext) + 1);
    if (plaintext == NULL) {
        printf("Memory allocation failed.");
        exit(1);
    }

    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            int index = 0;
            while (key[index] != ciphertext[i]) {
                index++;
            }
            plaintext[i] = base + index;
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
    return plaintext;
}

int main() {
    const char *plaintext = "This is a secret message.";
    const char *key = "QWERTYUIOPASDFGHJKLZXCVBNM";

    char *encrypted_message = encrypt(plaintext, key);
    printf("Encrypted message: %s\n", encrypted_message);

    char *decrypted_message = decrypt(encrypted_message, key);
    printf("Decrypted message: %s\n", decrypted_message);

    free(encrypted_message);
    free(decrypted_message);

    return 0;
}
