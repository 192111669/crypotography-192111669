#include <stdio.h>

int gcd(int a, int b) {
    if (b == 0) {
        return a;
    } else {
        return gcd(b, a % b);
    }
}

int multiplicativeInverse(int a) {
    for (int i = 1; i < 26; i++) {
        if ((a * i) % 26 == 1) {
            return i;
        }
    }
    return -1; // No multiplicative inverse found
}

void affineCaesarCipherEncrypt(int a, int b, char plaintext[]) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        if (plaintext[i] >= 'A' && plaintext[i] <= 'Z') {
            plaintext[i] = ((a * (plaintext[i] - 'A') + b) % 26) + 'A';
        } else if (plaintext[i] >= 'a' && plaintext[i] <= 'z') {
            plaintext[i] = ((a * (plaintext[i] - 'a') + b) % 26) + 'a';
        }
    }
}

int main() {
    char plaintext[1000];
    int a, b;

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    printf("Enter the value of a: ");
    scanf("%d", &a);
    printf("Enter the value of b: ");
    scanf("%d", &b);

    // Check if b is coprime to 26
    if (gcd(b, 26) != 1) {
        printf("Error: b must be coprime to 26 for decryption to be possible.\n");
        return 1;
    }

    // Check if a has a multiplicative inverse modulo 26
    if (multiplicativeInverse(a) == -1) {
        printf("Error: a has no multiplicative inverse modulo 26.\n");
        return 1;
    }

    affineCaesarCipherEncrypt(a, b, plaintext);
    printf("Encrypted text: %s\n", plaintext);

    return 0;
}
